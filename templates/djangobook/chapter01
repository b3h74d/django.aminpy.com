[h2]«هد/»
مقدمه ای از جنگو
[/h2]

[p]id="1"[p/]
این کتاب درباره یک فریم ورک وب به نام جنگو می باشد که از نظر سرعت و قدرت بسیار کارا بوده و  کار کردن با آن بسیار لذت بخش می باشد. با استفاده از جنگو شما می توانید با حداقل تلاش برنامه های تحت وب با کیفیت بالا ایجاد و پشتیبانی کنید.
[/p]

[p]id="2"[p/]
توسعه وب در صورتی که درست انجام پذیرد یک کار هیجان انگیز و خلاق است، اما در صورتی که اصولی انجام نپذیرد می تواند تکراری، خسته کننده و حتی آزار دهنده باشد. جنگو به شما این اجازه را می دهد که بروی چیزهایی خارج از دوباره نویسی قسمت های تکراری تمرکز کنید. برای این منظور، جنگو الگوهای خاصی از قبیل کلیدهای میانبر برای عملیات های تکراری و غیره ... را ایجاد کرده است. همچنین جنگو به شما اجازه می دهد تا خارج از محدوده فریم ورک نیز در صورت نیاز کار کنید.
[/p]

[p]id="3"[p/]
هدف این کتاب تربیت توسعه دهندگان حرفه ای  جنگو می باشد.  کتاب به دوموضوع توجه دارد. اول اینکه، ما به صورت عمقی نحوه عملکرد جنگو و طریقه ساختن برنامه های تحت وب با آن را توضیح می دهیم. دوم، در ادامه ما در مورد مفاهیم پیشرفته تر بحث خواهیم کرد. از طریق خواندن این کتاب، شما مهارت مورد نیاز برای توسعه وب سایت های پر قدرت با سرعت زیاد را کسب خواهید نمود.
[/p]

[h3]id="4"«هس/»
یک فریم ورک وب چیست؟
[/h3]

[p]id="5"[p/]
جنگو یک فریم ورک جدید و برجسته وب است, اما معنی دقیق یک فریم ورک چیست؟
[/p]

[p]id="6"[p/]
برای جواب دادن به سوال بالا، اجازه دهید طرح یک برنامه وب نوشته شده در پایتون را بدون استفاده از فریم ورک بررسی کنیم. در سراسر این کتاب، ما این رویکرد را دنبال می کنیم که روش های پایه و بدون استفاده از میانبر (shortcuts) را نشان داده، با این امید که شما به این تشخیص برسید که چرا کلید های میانبر بسیار مفید می باشند. (همچنین عدم استفاده از میانبرها (shortcuts) به جهت دیگری مفید می باشد زیرا آنها همیشه در دسترس نمی باشند. مهمتر از همه، دانستن اینکه برنامه به چه طریق کار می کند در بالا بردن مهارت شما بسیار موثر است.)
[/p]

[p]id="7"[p/]
یکی از آسان ترین روش های ساخت یک برنامه وب پایتون، استفاده از CGI می باشد، که در حدود سال های 1998 محبوب بود. تنها کافی است یک اسکریپت پایتون که خروجی HTML تولید می کند نوشته، سپس اسکریپت را با پسوند [چپ]".cgi"[/چپ] درون وب سرور ذخیره کنید و در آخر نیز صفحه را درون مرورگر خود مشاهده کنید.
[/p]

[p]id="8"[p/]
در اینجا یک مثال اسکریپت CGI پایتون وجود دارد که ده کتاب پایانی منتشر شده را از دیتابیس خوانده و نمایش می دهد. تنها کافیست کلیات عملیاتی که در کد زیر انجام شده است را دریابید و نگران جزئیات کد زیر نباشید.
[/p]

[code]
#!/usr/bin/env python

import MySQLdb

print "Content-Type: text/html\n"
print "<html><head><title>Books</title></head>"
print "<body>"
print "<h1>Books</h1>"
print "<ul>"

connection = MySQLdb.connect(user='me', passwd='letmein', db='my_db')
cursor = connection.cursor()
cursor.execute("SELECT name FROM books ORDER BY pub_date DESC LIMIT 10")

for row in cursor.fetchall():
    print "<li>%s</li>" % row[0]

print "</ul>"
print "</body></html>"

connection.close()
[/code]

[p]id="9"[p/]
در ابتدا، برای تکمیل نیازمندی های CGI، در خط 5 عبارت "Content-Type" و به دنبال آن یک خط خالی چاپ شده است. در خط 5 تا 9 نیز کدهای مربوط به HTML چاپ شده، سپس به دیتابیس وصل شده و یک پرس و جو برای بازیابی اسامی ده کتاب آخر اجرا شده است. در خط 15 با یک حلقه لیست کتاب ها نمایش داده شده است و در آخر نیز HTML و connection دیتابیس بسته شده است.
[/p]

[p]id="10"[p/]
فهمیدن کد بالا بسیار ساده است. حتی یک برنامه نویس مبتدی نیز می تواند این خطوط را خوانده و هر آنچه از بالا تا پایین انجام می گیرد را بفهمد. همچنین اجرای این کد نیز ساده می باشد، تنها کافی است کد را با پسوند ".cgi" ذخیره کرده و آنرا در وب سرور قرار دهید و توسط مرورگر آدرس آن را فراخوانی کنید.
[/p]

[p]id="11"[p/]
اما با وجود تمام این سادگی ها، در استفاده کلی از روش بالا ممکن است با مسائل و مشکلاتی روبه رو شویم. به عنوان مثال به سوالات زیر توجه کنید:
[/p]

[ul][ul/]
[li]id="12"[li/]
چه اتفاقی می افتد اگر چندین بخش از برنامه شما نیاز داشته باشند به دیتابیس وصل شوند؟ مطمئنا کد مربوط به اتصال به دیتابیس نیازی نیست در CGI اسکریپت ها به صورت منحصر به فرد تکرار شود. واقع بینانه این است که کد مربوط درون یک تابع به اشتراک گذاشته شده و بارها فراخوانده شود.
[/li]

[li]id="13"[li/]
آیا یک توسعه دهنده (developer) باید در مورد چاپ کردن خط "Content-Type" و بیاد آوردن بستن connection دیتابیس همواره نگرانی داشته باشد؟  این قبیل مسائل باعث کاهش باروری برنامه نویس و بالا رفتن احتمال اشتباه می شود.
[/li]

[li]id="14"[li/]
چه اتفاقی می افتد هنگامی که این کد در محیط های مختلف برای دیتابیس های مختلف استفاده شود؟ در این صورت تنظیمات مختلف برای هر دیتابیس و محیط یک امر ضروری می باشد.
[/li]

[li]id="15"[li/]
چه اتفاقی می افتد هنگامی که یک طراح وب، کسی که هیچ آشنایی و تجربه ای در مورد کد پایتون ندارد بخواهد صفحه را دوباره طراحی کند؟ ایده آل آن است که منطق مربوط به قسمت های خواندن اطلاعات از دیتابیس و نمایش آنها از هم جدا شوند، و اطلاعات خوانده شده درون یک صفحه Html نمایش داده شود تا طراح بتواند صفحه را طراحی کند.
[/li]
[/ul]

[p]id="16"[p/]
این مشکلات دقیقا مسائلی می باشند که یک فریم ورک وب قصد حل کردن آن را دارد. یک فریم ورک وب درست مانند یک زیرساخت برای برنامه های شماست، به طوری که بتوانید به روی تمیز برنامه نوشتن یا کد قابل اصلاح بدون دوباره نویسی تمرکز کنید، خلاصه اینکه جنگو تمام وظایف ذکر شده را انجام می دهد.
[/p]

[h3]id="17"«هس/»
الگوی طراحی MVC
[/h3]

[p]id="18"[p/]
بیایید یک مثال که تفاوت بین روش قبلی و روش با استفاده از فریم ورک وب را نشان می دهد را مورد بررسی قرار دهیم. در اینجا نحوه نوشتن کد قبلی CGI را با استفاده از جنگو نشان داده شده است. اولین چیزی که باید توجه کنید این است که ما عملیات انجام شده در کد قبلی را در سه فایل پایتون (models.py، views.py، urls.py) و یک فایل [چپ]HTML (latest_books.html)[/چپ] از هم جدا کرده ایم:
[/p]

[code]
# models.py (the database tables)

from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=50)
    pub_date = models.DateField()


# views.py (the business logic)

from django.shortcuts import render_to_response
from models import Book

def latest_books(request):
    book_list = Book.objects.order_by('-pub_date')[:10]
    return render_to_response('latest_books.html', {'book_list': book_list})


# urls.py (the URL configuration)

from django.conf.urls.defaults import *
import views

urlpatterns = patterns('',
    (r'^latest/$', views.latest_books),
)


# latest_books.html (the template)

<html><head><title>Books</title></head>
<body>
<h1>Books</h1>
<ul><ul/>
{% for book in book_list %}
<li>id="19"<li/>
{{ book.name }}
</li>

{% endfor %}
</ul>
</body></html>
[/code]

[p]id="20"[p/]
دوباره، درباره کد بالا و کارکرد آن نگران نباشید؛ تنها پیدا کردن فهم کلی نسبت به طراحی آن کافی است. نکته اصلی مورد توجه اینجا قسمت های مختلف جدا شده از هم می باشد:
[/p]

[ul][ul/]
[li]id="21"[li/]
فایل models.py حاوی یک توضیح از جدول دیتابیس می باشد که بصورت کلاس پایتون نمایش داده شده است. این کلاس یک model نامیده می شود. با استفاده از آن شما می توانید رکوردهای درون دیتابیس را با استفاده از کد ساده پایتون ساخته، بازیابی، به روز سازی و حذف کنید.
[/li]

[li]id="22"[li/]
فایل views.py حاوی منطق های برنامه نویسی برای صفحه می باشد. تابع [چپ]latest_books()[/چپ] با نام view شناخته می شود.
[/li]

[li]id="23"[li/]
فایل urls.py نسبت به url داده شده view مورد نظر را تعیین می کند. در مثال فوق /latest/ با تابع [چپ]latest_book()[/چپ] مرتبط خواهد شد. به زبان ساده تر، اگر دامنه شما example.com است، هر بازدیدی از آدرس [چپ]http://example.com/latest/[/چپ] تابع [چپ]latest_book()[/چپ] را فراخوانی خواهد کرد.
[/li]

[li]id="24"[li/]
فایل latest_books.html یک قالب HTML است که طرح صفحه در آن قرار می گیرد. این قالب از یک زبان template با جملات منطقی پایه مانند {% for book in book_list %}استفاده می کند.
[/li]
[/ul]

[p]id="25"[p/]
قسمت های فوق یک الگو را دنبال می کنند که Model-View-Controller یا (MVC) نامیده می شود. به  عبارت ساده MVC یک روش برای توسعه دادن نرم افزار است به طوری که کد برای تعریف کردن و دسترسی داشتن داده (the model) از منطق (the controller) جدا شده و آن نیز از رابط کاربر  (the view) جدا می باشد. (ما در مورد MVC در فصل پنجم به طور مفصل بحث خواهیم کرد.)
[/p]

[p]id="26"[p/]
مزیت کلیدی روش MVC این است که اجزا نسبت به یکدیگر به اصطلاح loosely coupled هستند. بدین معنا که هر قسمت مجزا از برنامه تحت وب جنگو هدف خاص خود را دارد و می تواند بدون تاثیربر روی دیگر قسمت ها به طور مستقل تغییر کند. به عنوان مثال، یک توسعه دهنده می تواند مسیر یک بخش داده شده از برنامه را بدون تاثیر بر روی اصل برنامه تغییر دهد. یک طراح می تواند صفحه HTML را بدون کار کردن با کد پایتون تغییر داده و تحویل دهد. یک مدیر دیتابیس می تواند جداول درون دیتابیس را تغییر نام داده و هر تغییری را درون یک قسمت خاص بدهد.
[/p]

[p]id="27"[p/]
در این کتاب، هر بخش از MVC درون فصل خود بحث شده است. فصل سوم views را پوشش می دهد، فصل چهارم templates را و فصل پنجم نیز models را پوشش می دهد.
[/p]

[h3]id="28"«هس/»
تاریخچه جنگو
[/h3]

[p]id="29"[p/]
پیش تر ما درون کدها به بررسی پرداختیم، همچنین ما باید مقداری به توضیح تاریخچه جنگو بپردازیم. در قبل گفته شد که ما نحوه کارکردن قسمت ها بدون استفاده از میانبرها را نشان خواهیم داد به طوری که شما فهم و درک بیشتری برای مفید بودن میانبرها پیدا کنید. همینطور فهمیدن اینکه جنگو به چه دلایلی ساخته شده است نیز مفید خواهد بود.
[/p]

[p]id="30"[p/]
اگر شما برای مدتی برنامه تحت وب ساخته باشید، شاید با مشکلات CGI، مانند مثال قبلی کتاب که پیش تر توضیح داده شد، آشنا شده باشید. مسیر توسعه دهندگان وب شکلی شبیه به این داشته است:
[/p]

[ol][ol/]
[li]id="31"[li/]
نوشتن یک برنامه وب از ابتدا.
[/li]

[li]id="32"[li/]
نوشتن یک برنامه دیگر از ابتدا.
[/li]

[li]id="33"[li/]
پی بردن به اینکه برنامه در گام اول اشتراکات عمومی زیادی با برنامه در گام دوم دارد.
[/li]

[li]id="34"[li/]
تغییر کد به طوری که برنامه اول بتواند کد خود را با برنامه دوم به اشتراک بگذارد.
[/li]

[li]id="35"[li/]
تکرار کردن گام های 2-4 به صورت چند بار.
[/li]

[li]id="36"[li/]
درک کردن ساخت یک فریم ورک.
[/li]
[/ol]

[p]id="37"[p/]
این دقیقا نحوه ساخته شدن فریم ورک است
[/p]

[p]id="38"[p/]
جنگو از برنامه های real-word نوشته شده توسط تیم توسعه دهندگان وب در لارنس، کانزاس آمریکا رشد کرد. جنگو در پاییز سال 2003 متولد شد، هنگامی که برنامه نویسان وب در روزنامه Journal-World، آدریان هولاوتی و سیمون ویلیسون استفاده از پایتون را برای ساختن برنامه ها شروع کرده بودند.
[/p]

[p]id="39"[p/]
تیم World Online مسئولیت تولید و نگهداری چندین سایت اخبار محلی را به عهده داشت، که در یک محیط کاری همراه با ضرب العجل های روزنامه نگاری رشد کرده بود. برای سایت های LJWorld.com، Lawrence.com، و KUsports.com روزنامه نگاران و مدیران خصوصیات جدیدی با برنامه کاری به شدت پر سرعت را درخواست کردند. در نتیجه سیمون و آدریان یک فریم ورک توسعه وب با صرفه جویی در زمان را توسعه دادند که آن تنها راهی بود که می توانستند برنامه های قابل پشتیبانی در ضرب العجل های سریع را بسازند.
[/p]

[p]id="40"[p/]
در تابستان سال 2005، بعد از توسعه این فریم ورک، جایی که برای ایجاد سایت های World Online بیشترین تاثیر را داشت، و همچنین هنگامی که جاکُب کاپلان مُس، به آنها ملحق شد، تصمیم گرفته شد فریم ورک به صورت نرم افزار کد باز (open source) منتشر شود. آنها فریم ورک خود را در جولای سال 2005 با نام جنگو منتشر کردند، به یادبود گیتاریست سبک جاز "جنگو رینهارت".
[/p]

[p]id="41"[p/]
حالا چندین سال بعد، جنگو یک پروژه کد باز خیلی مشهور با ده ها هزار کاربر و حامی پخش شده در سراسر دنیا می باشد. دو تن از توسعه دهندگان اصلی World Online (آدریان و جاکُب) هنوز هدایت مرکزی برای رشد فریم ورک را انجام می دهند، اما جنگو حاصل تلاش و همکاری فراوان کل گروه است.
[/p]

[p]id="42"[p/]
این تاریخچه مربوط به بحث می باشد زیرا به توضیح دو موضوع کلیدی کمک می کند. اول موقعیت خوب جنگو. از آنجایی که جنگو در یک محیط اخبار متولد شده است، می تواند خصوصیات مختلفی از قبیل سایت مدیر، (که در فصل ششم به آن پرداخته شده است)را ارائه دهد که به ویژه برای سایت های محتوی  (content) مانند Amazon.com، craigslist.org و washingtonpost.com که اطلاعات پویا را ارائه می دهند، مناسب می باشند. البته این بدان معنی نیست که جنگو فقط برای توسعه دادن آن دسته از سایت ها خوب می باشد، اما این موضوع مانعی برای موثر بودن جنگو برای ساختن انواع دیگر وب سایت های پویا نمی باشد. (بین موثر بودن در چیزی به طور ویژه و بی تاثیر بودن در بقیه چیزها تفاوت بسیار است.)
[/p]

[p]id="43"[p/]
موضوع دوم ریشه های جنگو می باشد که دارای فرهنگ انجمن کد باز است، زیرا جنگو یک محصول تجاری و یا تجربیات دانشگاهی نیست بلکه کدی می باشد که از دنیای واقعی استخراج شده است و به طور عمیق بر روی حل مشکلات توسعه وب تمرکز کرده است.
[/p]

[h3]id="44"«هس/»
طریقه خواندن کتاب
[/h3]

[p]id="45"[p/]
در نوشتن این کتاب، ما سعی کرده ایم یک تعادل بین خوانایی و مرجع بودن برقرار نماییم، البته با تعصب نسبت به خوانایی. هدف ما در این کتاب، همانطور که قبلا گفته شد، حرفه ای کردن شما در جنگو می باشد، همچنین ما اعتقاد داریم بهترین روش برای آموزش توضیح به زبان ساده و استفاده از مثال های فراوان به جای تهیه کردن یک لیست کامل از خصوصیات جنگو می باشد. (شما نمی توانید انتظار داشته باشید تنها با آموختن حروف الفبا به کسی بتوانید نحوه صحبت کردن را به او بیاموزید.)
[/p]

[p]id="46"[p/]
با در نظر گرفتن این، ما توصیه می کنیم که فصل های اول تا دوازده را به ترتیب به طور کامل بخوانید. این فصل ها پایه و اساس جنگو و نحوه استفاده از آن را تشکیل می دهند. تنها با خواندن این دوازده فصل شما قادر به ساختن و گسترش وب سایت ها با استفاده از جنگو خواهید بود. به طور خاص فصل های اول تا هفتم هسته جنگو، فصل های هشتم تا یازدهم استفاده های پیشرفته از جنگو، و فصل دوازدهم گسترش (deployment) را پوشش می دهند. فصل های باقیمانده، سیزدهم تا بیستم، بر روی خصوصیات ویژه جنگو می باشد.
[/p]

[h4]id="47"[h4/]
دانش مورد نیاز برنامه نویسی
[/h4]

[p]id="48"[p/]
خوانندگان این کتاب باید قوائد برنامه نویسی شی گرا را بدانند: ساختار های کنترلی (مانند، if، while، for)، ساختارهای داده (lists، hashes/dictionaries)، متغیرها، کلاس ها و شی ها (objects).
[/p]

[p]id="49"[p/]
ممکن است شما فکر کنید تجربه در توسعه وب می تواند بسیار مفید باشد، اما این موضوع یک پیش نیاز برای فهم این کتاب نیست. در سرتاسر این کتاب، ما سعی کردیم از بهترین تمرین ها در توسعه وب برای خوانندگانی که تجربه کمی دارند استفاده کنیم.
[/p]

[h4]id="50"[h4/]
دانش مورد نیاز پایتون
[/h4]

[p]id="51"[p/]
جنگو مجموعه ای از کتابخانه های نوشته شده با زبان برنامه نویسی پایتون می باشد. برای گسترش یک سایت با استفاده از جنگو، شما کد پایتونی می نویسید که از این کتابخانه ها استفاده می کند. یاد گرفتن جنگو ترکیبی از دانستن نحوه نوشتن برنامه به زبان پایتون و فهمیدن کار کتابخانه های جنگو می باشد.
[/p]

[h3]id="52"«هس/»
گام بعدی
[/h3]

[p]id="53"[p/]
در فصل بعدی، نصب و تنظیمات اولیه جنگو را شروع خواهیم کرد.
[/p]
